#Alessandro Panagia
## Define a map and let the player move around it
#Define our map: 1 = wall, 0 = path
#0,0 is the top left of the map, therefore...
#moving up decreases the y location and
#moving left decreases the x location and vice versa
import random
import turtle
import time
import turtle
from turtle import *
#setting up the screen.
screen = Screen()
screen.setup(800,800)
screen.title("The Adventure Game with No Name")
screen.bgcolor("Dark gray")
screenad = 200
row=11
column=11

#Set our starting location
currX = 1
currY = 9

#The turtle for drawing the map
MapDraw=Turtle()
MapDraw.clear()
MapDraw.penup()

MapDraw.shape("circle")
MapDraw.position()
MapDraw.speed(0)
MapDraw.sety(0)
MapDraw.setheading(0)
MapDraw.goto(-200,200)

MapDraw.pendown()
MapDraw.hideturtle()


#variable
key = 0

#Constants
PATH=0
WALL=1
PITFALL=2
KEY=3
DOOR=4
GOAL=5
LOCKED_DOOR=6
WHEEL=7
RIVER=8
SEWER=9
DRAIN=10
SIZE=35
Map = [
			[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
			[ 1, 8, 8, 8, 8, 8, 8, 8, 8, 3, 1 ],
			[ 1, 7, 0, 0, 0, 0, 0, 4, 0, 0, 1 ],
			[ 1, 0, 0, 1, 1, 1, 1, 1, 2, 0, 1 ],
			[ 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1 ],
			[ 1, 0, 0, 0, 2, 5, 6, 0, 0, 3, 1 ],
			[ 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 1 ],
			[ 1, 0, 9, 1, 0, 0, 2, 1, 0, 1, 1 ],
			[ 1, 0, 0, 1, 4, 1, 1, 1, 0, 1, 1 ],
			[ 1, 0, 0, 0, 0, 0, 0, 0, 0, 10, 1 ],
			[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
	]


#Define a function to print our Map and current Player location

#Drawing the map.

#Drawing player
def drawplayer(x, y):
    player=Turtle()
    player.clear()
    player.penup()

    player.shape("circle")
    player.position()
    player.speed(0)
    player.sety(0)
    player.setheading(90)
    player.goto(x,y)
    return(player)

#Drawing the map itself
def drawsquare(sqcolor, x, y, MapDraw):
    MapDraw.pencolor(sqcolor)
    MapDraw.penup()
    MapDraw.goto(x, y)
    MapDraw.pendown()
    MapDraw.fillcolor(sqcolor)
    MapDraw.begin_fill()
    for square in range(4):
        MapDraw.forward(SIZE)
        MapDraw.left(90)
    MapDraw.end_fill()

#function before drawing the map
def drawMap(currX, currY, row, column, MapDraw):
    for r in range(row):
        for c in range(column):
            x = SIZE*c-screenad
            y = SIZE*-r+screenad
            if currX == c and currY == r:
                drawsquare(bgcolor(),x, y, MapDraw)
                player=drawplayer(x+SIZE/2, y+SIZE/2)
            elif (Map[r][c] == WALL):
                drawsquare("brown", x, y, MapDraw)
            elif (Map[r][c] == RIVER):
                drawsquare("light blue", x, y, MapDraw)
            elif(Map[r][c] == GOAL):
                drawsquare("Yellow", x, y, MapDraw)
            else:
                drawsquare(bgcolor(),x, y, MapDraw)
    return(player)
    

#Define our function that will move the player
#The function will first check if the player can move or hits a wall
#If the player can move, then the current location will be updated
#If the player cannot move due to a wall or a river, the location will not be updated

#Moving forward
def moveForward(x,y,key):
    #assume invalid move is attempted
    badMoveWall = True
    
    #For when the player dies
    if Map[y][x] == PITFALL:
        print ("")
        print ("You fell in a pitfall and died. Womp. Womp.")
        exit()
    
    #For when the player wins 
    if Map[y][x] == GOAL:
        print ("")
        print ("You Win! Now what?")
        exit()

    #Now check if the move is valid - brute force method - better ways exist
    
    #If the player moved forward
    if "w":

        #Go to the key function.
        if Map[y-1][x] == KEY:
            if player.heading()==90:
                player.forward(SIZE)
            else:
                player.setheading(90)
                player.forward(SIZE)
            return (x, y-1, keyfun(key))
        #For the door when it locks behind you.
        elif Map[y-1][x] == DOOR:
            if player.heading()==90:
                player.forward(SIZE*2)
            else:
                player.setheading(90)
                player.forward(SIZE*2)
            print ("")
            print ("You go through a door but it locks behind you.")
            return (x,y-2,key)
        #Go to the locked door function.
        elif Map[y-1][x] == LOCKED_DOOR:
            if key != 1:
                if player.heading()==90:
                    player.forward(SIZE*0)
                else:
                    player.setheading(90)
                    player.forward(SIZE*0)
                return (lockedDoorFun(x,y,key))
            else:
                if player.heading()==90:
                    player.forward(SIZE*2)
                else:
                    player.setheading(90)
                    player.forward(SIZE*2)
                return (lockedDoorFun(x,y,key))
        #Go to the wheel function.
        elif (Map[y-1][x] == WHEEL):
            if player.heading()==90:
                player.forward(SIZE)
            else:
                player.setheading(90)
                player.forward(SIZE)
            return (x, y-1, wheelfun(key))
        #Go to the sewer function.
        elif Map[y-1][x]==SEWER:
            if player.heading()==90:
                player.forward(SIZE)
            else:
                player.setheading(90)
                player.forward(SIZE)
            return(x,y-1,sewerfun(key))
        #Go to the drain function.
        elif Map[y-1][x]==DRAIN:
            if player.heading()==90:
                player.forward(SIZE)
            else:
                player.setheading(90)
                player.forward(SIZE)
            return(x,y-1,drainfun(key))
        #To move up
        elif (Map[y-1][x] != WALL) and (Map[y-1][x] != RIVER):
            #print ("valid up move")
            if player.heading()==90:
                player.forward(SIZE)
            else:
                player.setheading(90)
                player.forward(SIZE)
            return (x, y-1, key)
        #River
        elif Map[y-1][x] == RIVER:
            print ("")
            print ("It's a river. That's it.")
            return (x,y,key) #It acts like a wall in the sense of you can't move there.

        #they attempted a bad move
        if badMoveWall:
            print ("")
            print ("You either A moved where a wall was, or B made a invalid move. So try again.")
            return (x,y,key)   #return the same location they are in since no move

#moving backwards
def moveBackwards(x,y,key):
    #assume invalid move is attempted
    badMoveWall = True
    
    #For when the player dies
    if Map[y][x] == PITFALL:
        print ("")
        print ("You fell in a pitfall and died. Womp. Womp.")
        exit()
    
    #For when the player wins 
    if Map[y][x] == GOAL:
        print ("")
        print ("You Win! Now what?")
        exit()
    
    #If the player moved backwards
    if "s":

        #Go to the key function.
        if Map[y+1][x] == KEY:
            if player.heading()==270:
                player.forward(SIZE)
            else:
                player.setheading(270)
                player.forward(SIZE)
            return (x, y+1, keyfun(key))
        #To show that the door is still locked
        elif Map[y+1][x] == DOOR:
            print ("")
            print ("It's still locked.")
            return (x,y,key)
        #Go to the locked door function.
        elif Map[y+1][x] == LOCKED_DOOR:
            if key != 1:
                if player.heading()==270:
                    player.forward(SIZE*0)
                else:
                    player.setheading(270)
                    player.forward(SIZE*0)
                return (lockedDoorFun(x,y,key))
            else:
                if player.heading()==270:
                    player.forward(SIZE*2)
                else:
                    player.setheading(270)
                    player.forward(SIZE*2)
                return (lockedDoorFun(x,y,key))
        #Go to the wheel function.
        elif (Map[y+1][x] == WHEEL):
            if player.heading()==270:
                player.forward(SIZE)
            else:
                player.setheading(270)
                player.forward(SIZE)
            return (x, y+1, wheelfun(key))
        #Go to the sewer function.
        elif Map[y+1][x]==SEWER:
            if player.heading()==270:
                player.forward(SIZE)
            else:
                player.setheading(270)
                player.forward(SIZE)
            return(x,y+1,sewerfun(key))
        #Go to the drain function.
        elif Map[y+1][x]==DRAIN:
            if player.heading()==270:
                player.forward(SIZE)
            else:
                player.setheading(270)
                player.forward(SIZE)
            return(x,y+1,drainfun(key))
        #To move down 
        elif (Map[y+1][x] != WALL) and (Map[y+1][x] != RIVER):
            #print ("valid down move")
            if player.heading()==270:
                player.forward(SIZE)
            else:
                player.setheading(270)
                player.forward(SIZE)
            return (x, y+1, key)
        #River
        elif Map[y+1][x] == RIVER:
            print ("")
            print ("It's a river. That's it.")
            return (x,y,key) #It acts like a wall in the sense of you can't move there.

        #they attempted a bad move
        if badMoveWall:
            print ("")
            print ("You either A moved where a wall was, or B made a invalid move. So try again.")
            return (x,y,key)   #return the same location they are in since no move

#moving left
def moveLeft(x,y,key):
    #assume invalid move is attempted
    badMoveWall = True
    
    #For when the player dies
    if Map[y][x] == PITFALL:
        print ("")
        print ("You fell in a pitfall and died. Womp. Womp.")
        exit()
    
    #For when the player wins 
    if Map[y][x] == GOAL:
        print ("")
        print ("You Win! Now what?")
        exit()
    
    #If the player moved left
    if "a":

        #Go to the key function.
        if Map[y][x-1] == KEY:
            if player.heading()==180:
                player.forward(SIZE)
            else:
                player.setheading(180)
                player.forward(SIZE)
            return(x-1,y,keyfun(key))
        #To show that the door is still locked
        elif Map[y][x-1] == DOOR:
            print ("")
            print ("It's still locked.")
            return (x,y,key)
        #Go to the locked door function.
        elif Map[y][x-1] == LOCKED_DOOR:
            if key != 1:
                if player.heading()==180:
                    player.forward(SIZE*0)
                else:
                    player.setheading(180)
                    player.forward(SIZE*0)
                return (lockedDoorFun(x,y,key))
            else:
                if player.heading()==180:
                    player.forward(SIZE*2)
                else:
                    player.setheading(180)
                    player.forward(SIZE*2)
                return (lockedDoorFun(x,y,key))
        #Go to the wheel function.
        elif (Map[y][x-1] == WHEEL):
            if player.heading()==180:
                player.forward(SIZE)
            else:
                player.setheading(180)
                player.forward(SIZE)
            return (x-1, y, wheelfun(key))
        #Go to the sewer function.
        elif Map[y][x-1]==SEWER:
            if player.heading()==180:
                player.forward(SIZE)
            else:
                player.setheading(180)
                player.forward(SIZE)
            return(x-1,y,sewerfun(key))
        #Go to the drain function.
        elif Map[y][x-1]==DRAIN:
            if player.heading()==180:
                player.forward(SIZE)
            else:
                player.setheading(180)
                player.forward(SIZE)
            return(x-1,y,drainfun(key))
        #To move left
        elif (Map[y][x-1] != WALL) and (Map[y][x-1] != RIVER):
            #print ("valid left move")
            if player.heading()==180:
                player.forward(SIZE)
            else:
                player.setheading(180)
                player.forward(SIZE)
            return (x-1, y, key)
        #River
        elif Map[y][x-1] == RIVER:
            print ("")
            print ("It's a river. That's it.")
            return (x,y,key) #It acts like a wall in the sense of you can't move there.

        #they attempted a bad move
        if badMoveWall:
            print ("")
            print ("You either A moved where a wall was, or B made a invalid move. So try again.")
            return (x,y,key)   #return the same location they are in since no move

#moving right
def moveRight(x,y,key):
    #assume invalid move is attempted
    badMoveWall = True

    #For when the player dies
    if Map[y][x] == PITFALL:
        print ("")
        print ("You fell in a pitfall and died. Womp. Womp.")
        exit()
    
    #For when the player wins 
    if Map[y][x+1] == GOAL:
        print ("")
        print ("You Win! Now what?")
        exit()

    #If the player moved right
    if "d":
        #Go to the key function.
        if Map[y][x+1] == KEY:
            if player.heading()==0:
                player.forward(SIZE)
            else:
                player.setheading(0)
                player.forward(SIZE)
            return (x+1, y, keyfun(key))
        #For the door when it locks behind you
        elif Map[y][x+1] == DOOR:
            if player.heading()==0:
                player.forward(SIZE*2)
            else:
                player.setheading(0)
                player.forward(SIZE*2)
            print ("")
            print ("You go through a door but it locks behind you.")
            return (x+2,y,key)
        #Go to the locked door function.
        elif Map[y][x+1] == LOCKED_DOOR:
            if key != 1:
                if player.heading()==0:
                    player.forward(SIZE*0)
                else:
                    player.setheading(0)
                    player.forward(SIZE*0)
                return (lockedDoorFun(x,y,key))
            else:
                if player.heading()==0:
                    player.forward(SIZE*2)
                else:
                    player.setheading(90)
                    player.forward(SIZE*2)
                return (lockedDoorFun(x,y,key))
        #Go to the wheel function.
        elif (Map[y][x+1] == WHEEL):
            if player.heading()==0:
                player.forward(SIZE)
            else:
                player.setheading(0)
                player.forward(SIZE)
            return (x+1, y, wheelfun(key))
        #Go to the sewer function.
        elif Map[y][x+1]==SEWER:
            if player.heading()==0:
                player.forward(SIZE)
            else:
                player.setheading(0)
                player.forward(SIZE)
            return(x+1,y,sewerfun(key))
        #Go to the drain function.
        elif Map[y][x+1]==DRAIN:
            if player.heading()==0:
                player.forward(SIZE)
            else:
                player.setheading(0)
                player.forward(SIZE)
            return(x+1,y,drainfun(key))
        #To move right
        elif (Map[y][x+1] != WALL) and (Map[y][x+1] != RIVER):
            #print ("valid right move")
            if player.heading()==0:
                player.forward(SIZE)
            else:
                player.setheading(0)
                player.forward(SIZE)
            return (x+1, y, key)
        #River
        elif Map[y][x+1] == RIVER:
            print ("")
            print ("It's a river. That's it.")
            return (x,y,key) #It acts like a wall in the sense of you can't move there.
        
    #if (key == 0):
     #   print ("No key.")

        #they attempted a bad move
        if badMoveWall:
            print ("")
            print ("You either A moved where a wall was, or B made a invalid move. So try again.")
            return (x,y,key)   #return the same location they are in since no move

# Function for picking up the key.
def keyfun (key):
    #you can't get more than 1 key.
    if (key >= 1) or (key <= -1):
        print ("")
        print ("There is nothing here.")
        return (key)
    #When you pick up the key for the first time.
    elif (key == 0):
        #Asking you if you want to pick up the key.
        print ("")
        pickUpKey = input("There is a key on the ground. Do you want to pick it up? y/n ")
        pickupKey=pickUpKey.lower()

        if (pickupKey == "yes") or (pickupKey == "y"):
            print ("")
            print ("You found a key!")
            key=key+1
            print ("")
            print ("You have",key,"key(s).")
            return (key)
        else:
            print ("")
            print ("Well why did you come here in the first place.")
            return (key)
        

# Function for the locked door.
def lockedDoorFun(x,y,key):
    #The locked door will never open if you don't have a key.
    if (key != 1):
        print ("")
        print("You don't have a key, so... yeah.")
        return (x,y,key)
    #When you open the locked door with a key.
    else:
        print ("")
        print ("you unlocked the door!")
        key=key-1
        print ("")
        print ("You have",key,"key(s).")
        return (x-2,y,key)
    
#Function for the wheel to spin.
def wheelfun(key):
    #Input for wheel.
    print ("")
    Gamble=input("There is a wheel where it has a 1/3 chance for you to live, die, or give you a key. Will you spin it? y/n ")
    gamble=Gamble.lower()
    
    #print("gambling is awesome")
    #If the player wants to test their luck.
    if (gamble == "yes") or (gamble == "y"):
        spin=random.randint(1,3)
        #print("I love gambling")
        #If the player gets a key from spinning the wheel.
        if (spin == 1):
            if (key == 0):
                print ("")
                print ("It worked out for you and you got a key!")
                key=key+1
                print ("")
                print ("You have",key,"key(s).")
                return (key)
            #I was out of ideas when I wrote this.
            else:
                print ("")
                print ("Ok I have no idea for if the key value is different, so I'm just going to say that you win.")
                exit()
        #If the player dies from spinning the wheel.
        elif (spin == 2):
            print ("")
            print ("Some wierd magic twisted your insides until you poped. The moral of the story there is to never gamble.")
            exit()
        #If the player lives when spinning the wheel.
        else:
            print ("")
            print ("You live, sadly.")
            return (key)
    #If you don't want to test your luck.
    elif (gamble == "no") or (gamble == "n"):
        print ("")
        print ("You resist the urge and press on.")
        return (key)
    #If the game doesn't register what you are saying.
    else:
        print ("")
        print("Um... ok?")
        return (key)

#Function for dropping the key in the sewer.
def sewerfun(key):
    if (key >= 1):
        print ("")
        print ("So the key dropped from your pockets into the sewers. Don't worry, you can get it back from the sewer drain.")
        key=key-2
        #The reason why I subtracted 2 from the key is because making it 0 would result in getting the key back in the drain at the start.
        return(key)
    else:
        print ("")
        print("It's the sewer. Don't drop anything in there.")
        return(key)

#Function for getting the key back from the sewer drain.
def drainfun(key):
    if (key == -1):
        print ("")
        print ("It may be gross, but you got your key back.")
        key=key+2
        return(key)
    else:
        print ("")
        print("It's a sewer drain. If you want to get sick, then be my guest.")
        return(key)

#To make it compatable with onkey, I set up the functios like this so the variables can be used for the original map as well.
def Forward():
    #I had to use globals for the functions becuase you can't pass variables in with onkey.
    global currX, currY, key
    currX, currY, key = moveForward(currX, currY, key)
    return()

def Backwards():
    global currX, currY, key
    currX, currY, key = moveBackwards(currX, currY, key)
    return()

def Left():
    global currX, currY, key
    currX, currY, key = moveLeft(currX, currY, key)
    return()

def Right():
    global currX, currY, key
    currX, currY, key = moveRight(currX, currY, key)
    return()

#Forever just let the player move around the map on the path
#**** Main Game Loop ****
screen.tracer(0)

#Calling the function for drawing the map and player
player=drawMap(currX, currY, row, column, MapDraw)

#For the movements of the graphics
listen()
onkey(Forward,"w")
onkey(Backwards,"s")
onkey(Left,"a")
onkey(Right,"d")

#Instructions before starting the game.
print("Welcome to the Adventure Game with No Name.")
time.sleep(2)
print ("")
print("Your goal is to get to the middle of the map where the yellow square is.")
time.sleep(2)
print ("")
print("Also the person guiding you really doesn't want you to win.")
time.sleep(2)
print ("")
print("So what are you waiting for, get too it.")
time.sleep(2)

while True:
    #drawMap(currX, currY)
    screen.update()
