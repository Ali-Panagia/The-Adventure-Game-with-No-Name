## Define a map and let the player move around it
#Define our map: 1 = wall, 0 = path
#0,0 is the top left of the map, therefore...
#moving up decreases the y location and
#moving left decreases the x location and vice versa
import random
import sys

key = 0

PATH=0
WALL=1
PITFALL=2
KEY=3
DOOR=4
GOAL=5
LOCKED_DOOR=6
WHEEL=7
RIVER=8
Map = [
			[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
			[ 1, 8, 8, 8, 8, 8, 8, 8, 8, 3, 1 ],
			[ 1, 7, 0, 0, 0, 0, 0, 4, 0, 0, 1 ],
			[ 1, 0, 1, 1, 1, 1, 1, 1, 2, 0, 1 ],
			[ 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 ],
			[ 1, 0, 0, 0, 2, 5, 6, 0, 0, 3, 1 ],
			[ 1, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1 ],
			[ 1, 0, 1, 1, 0, 0, 2, 1, 0, 1, 1 ],
			[ 1, 0, 1, 1, 4, 1, 1, 1, 0, 1, 1 ],
			[ 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ],
			[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ]
	]


#Define a function to print our Map and current Player location

def drawMap(currX, currY):
    #print ("map size is : ", len(Map), " rows by ", len(Map[0]), " columns")
    print()
    for y in range (0, len(Map)):
        for x in range (0,len(Map[y])):
            if (currX == x) and (currY == y):   #print * if they are in this square
                print("*  ", end="")
            elif (Map[y][x] != WALL) and (Map[y][x] != RIVER):
                print ("   ", end="")
            else:
                print (Map[y][x]," ", end ="")
        print()
    print()
    

#Define our function that will move the player
#The function will first check if the player can move or hits a wall
#If the player can move, then the current location will be updated
#If the player cannot move due to a wall or a river, the location will not be updated
    
def movePlayer(x,y,key,moveDir):
    #assume invalid move is attempted
    badMoveWall = True
    
    #For when the player dies
    if Map[y][x] == PITFALL:
        sys.exit("You fell in a pitfall and died. Womp. Womp.")
        return (x,y,key)
    
    #For when the player wins 
    if Map[y][x] == GOAL:
        sys.exit("You Win! Now what?")
        return(x,y,key)

    #Now check if the move is valid - brute force method - better ways exist
    
    #If the player moved up
    if moveDir.lower() == "w":
        #see line 177
        if Map[y-1][x] == KEY:
            return (x, y-1, keyfun(key))
        #For the door when it locks behind you.
        elif Map[y-1][x] == DOOR:
            print ("You go through a door but it locks behind you.")
            return (x,y-2,key,)
        #see line 194
        elif Map[y-1][x] == LOCKED_DOOR:
            return (lockedDoorFun(x,y,key))
        #see line 205
        elif (Map[y-1][x] == WHEEL):
            return (x, y-1, wheelfun(key))
        #To move up
        elif (Map[y-1][x] != WALL) and (Map[y-1][x] != RIVER):
            #print ("valid up move")
            return (x, y-1, key)
        #River
        elif Map[y-1][x] == RIVER:
            print ("It's a river. That's it.")
            return (x,y,key) #It acts like a wall in the sense of you can't move there.

    #If the player moved down
    if moveDir.lower() == "s":
        #see line 177
        if Map[y+1][x] == KEY:
            return (x, y+1, keyfun(key))
        #To show that the door is still locked
        elif Map[y+1][x] == DOOR:
            print ("It's still locked.")
            return (x,y,key)
        #see line 194
        elif Map[y+1][x] == LOCKED_DOOR:
            return (lockedDoorFun(x,y,key))
        #see line 205
        elif (Map[y+1][x] == WHEEL):
            return (x, y+1, wheelfun(key))
        #To move down 
        elif (Map[y+1][x] != WALL) and (Map[y+1][x] != RIVER):
            #print ("valid down move")
            return (x, y+1, key)
        #River
        elif Map[y+1][x] == RIVER:
            print ("It's a river. That's it.")
            return (x,y,key) #It acts like a wall in the sense of you can't move there.

    #If the player moved left
    if moveDir.lower() == "a":
        #see line 177
        if Map[y][x-1] == KEY:
            return(x-1,y,keyfun(key))
        #To show that the door is still locked
        elif Map[y][x-1] == DOOR:
            print ("It's still locked.")
            return (x,y,key,)
        #see line 194
        elif Map[y][x-1] == LOCKED_DOOR:
            return (lockedDoorFun(x,y,key))
        #see line 205
        elif (Map[y][x-1] == WHEEL):
            return (x-1, y, wheelfun(key))
        #To move left
        elif (Map[y][x-1] != WALL) and (Map[y][x-1] != RIVER):
            #print ("valid left move")
            return (x-1, y, key)
        #River
        elif Map[y][x-1] == RIVER:
            print ("It's a river. That's it.")
            return (x,y,key) #It acts like a wall in the sense of you can't move there.

    #If the player moved right
    if moveDir.lower() == "d":
        #see line 177
        if Map[y][x+1] == KEY:
            return (x+1, y, keyfun(key))
        #For the door when it locks behind you
        elif Map[y][x+1] == DOOR:
            print ("You go through a door but it locks behind you.")
            return (x+2,y,key)
        #see line 194
        elif Map[y][x+1] == LOCKED_DOOR:
            return (lockedDoorFun(x,y,key))
        #see line 205
        elif (Map[y][x+1] == WHEEL):
            return (x+1, y, wheelfun(key))
        #To move right
        elif (Map[y][x+1] != WALL) and (Map[y][x+1] != RIVER):
            #print ("valid right move")
            return (x+1, y, key)
        #River
        elif Map[y][x+1] == RIVER:
            print ("It's a river. That's it.")
            return (x,y,key) #It acts like a wall in the sense of you can't move there.
        
    #if (key == 0):
     #   print ("No key.")

    #they attempted a bad move
    if badMoveWall:
        print ("You either A moved where a wall was, or B made a invalid move. So try again.")
        return (x,y,key)   #return the same location they are in since no move

# Function for picking up the key.
def keyfun (key):
    if (key >= 1):
        print ("There is nothing here.")
        return (key)
    elif (key == 0):
        pickUpKey = input("There is a key on the ground. Do you want to pick it up? y/n ")
        pickupKey=pickUpKey.lower()

        if (pickupKey == "yes") or (pickupKey == "y"):
            print ("You found a key!")
            key=key+1
            print ("You have",key,"key(s).")
            return (key)
        else:
            print ("Well why did you come here in the first place.")
            return (key)
        

# Function for the locked door.
def lockedDoorFun(x,y,key):
    if (key == 0):
        print("You don't have a key, so... yeah.")
        return (x,y,key)
    if (key >= 1):
        print ("you unlocked the door!")
        key=key-1
        print ("You have",key,"key(s).")
        return (x-1,y,key)
    
#Function for the wheel to spin.
def wheelfun(key):
    Gamble=input("There is a wheel where it has a 1/3 chance for you to live, die, or give you a key. Will you spin it? y/n ")
    gamble=Gamble.lower()
    
    #print("gambling is awesome")
    if (gamble == "yes") or (gamble == "y"):
        spin=random.randint(1,3)
        #print("I love gambling")
        if (spin == 1):
            #When the player gets a key.
            if (key == 0):
                print ("It worked out for you and you got a key!")
                key=key+1
                print ("You have",key,"key(s).")
                return (key)
            #I was out of ideas when I wrote this.
            elif (key == 1):
                sys.exit("Ok I have no idea for if you got another key here, so I'm just going to say that you win.")
            else:
                sys.exit("This wasn't suppost to happen.")
        elif (spin == 2):
            sys.exit("Some wierd magic twisted your insides until you poped. The moral of the story there is to never gamble.")
        else:
            print ("You live, sadly.")
            return (key)
    elif (gamble == "no") or (gamble == "n"):
        print ("You resist the urge and press on.")
        return (key)
    else:
        print("Um... ok?")
        return (key)

#Set our starting location
currX = 1
currY = 9

#draw the map the first time before asking for a move
drawMap(currX, currY)

#Forever just let the player move around the map on the path
#**** Main Game Loop ****
while True:
    moveDir = input("Enter direction (w,s,a,d): ")
    currX, currY, key = movePlayer(currX, currY, key, moveDir)
    drawMap(currX, currY)
    
